name: 发布到 NPM

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
      - '**.js'
      - '**.ts'
      - '**.jsx'
      - '**.tsx'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本 (例如: 1.0.0)'
        required: false
        default: ''
      force_publish:
        description: '强制发布（即使版本未变）'
        required: false
        type: boolean
        default: false

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org/'
      
      - name: 安装依赖
        run: npm ci || npm install
      
      - name: 获取 MCP 信息
        id: mcp_info
        run: |
          # 获取原始package.json中的包名和版本
          ORIGINAL_NAME=$(node -p "require('./package.json').name")
          ORIGINAL_VERSION=$(node -p "require('./package.json').version")
          
          # 生成MCPFlow格式的包名
          REPO_NAME=$(echo ${{ github.repository }} | cut -d '/' -f 2)
          MCP_NAME=$(echo ${REPO_NAME} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          PACKAGE_NAME="@mcpflow.io/${MCP_NAME}"
          
          echo "original_name=${ORIGINAL_NAME}" >> $GITHUB_OUTPUT
          echo "original_version=${ORIGINAL_VERSION}" >> $GITHUB_OUTPUT
          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          
          # 设置版本（使用手动输入或当前版本）
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${ORIGINAL_VERSION}" >> $GITHUB_OUTPUT
          fi

          #### 测试Token ####
          echo "version=${{secrets.NPM_TOKEN}}"
      
      - name: 修改 package.json
        run: |
          # 读取package.json
          PACKAGE_JSON=$(cat package.json)
          
          # 修改package.json内容 - 使用单行命令避免YAML语法错误
          MODIFIED_JSON=$(echo "$PACKAGE_JSON" | jq --arg name "${{ steps.mcp_info.outputs.package_name }}" --arg version "${{ steps.mcp_info.outputs.version }}" --arg desc "$(node -p "require('./package.json').description || ''")" --arg originalName "${{ steps.mcp_info.outputs.original_name }}" --arg repoUrl "${{ github.server_url }}/${{ github.repository }}" --arg developer "${{ github.repository_owner }}" '.name = $name | .version = $version | .private = false | .mcpflow = {"originalName": $originalName, "developer": $developer, "gitRepo": $repoUrl, "callType": "MCP"} | .keywords = ((.keywords // []) + ["mcpflow", "mcp"] | unique)')
          
          # 写回package.json
          echo "$MODIFIED_JSON" > package.json
          cat package.json
      
      - name: 创建或更新 README
        run: |
          PACKAGE_NAME="${{ steps.mcp_info.outputs.package_name }}"
          REPO_NAME=$(echo ${{ github.repository }} | cut -d '/' -f 2)
          
          # 创建基本README
          echo "# ${REPO_NAME}" > README.md
          echo "" >> README.md
          echo "<!-- MCPFlow Packaged MCP -->" >> README.md
          echo "> 此包由 [MCPFlow](https://mcpflow.io) 打包并发布到npm仓库。" >> README.md
          echo "" >> README.md
          echo "## 安装与使用" >> README.md
          echo "" >> README.md
          echo "直接使用npx运行:" >> README.md
          echo "" >> README.md
          echo "\`\`\`bash" >> README.md
          echo "npx -y ${PACKAGE_NAME}" >> README.md
          echo "\`\`\`" >> README.md
          echo "" >> README.md
          echo "或者先安装后使用:" >> README.md
          echo "" >> README.md
          echo "\`\`\`bash" >> README.md
          echo "# 安装" >> README.md
          echo "npm install ${PACKAGE_NAME}" >> README.md
          echo "" >> README.md
          echo "# 使用" >> README.md
          echo "npx ${PACKAGE_NAME}" >> README.md
          echo "\`\`\`" >> README.md
          echo "" >> README.md
          echo "## 原始信息" >> README.md
          echo "" >> README.md
          echo "- **开发者:** ${{ github.repository_owner }}" >> README.md
          echo "- **版本:** ${{ steps.mcp_info.outputs.version }}" >> README.md
          echo "- **原始仓库:** [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})" >> README.md
      
      - name: 检查包是否存在
        id: check_package
        if: ${{ github.event.inputs.force_publish != 'true' }}
        continue-on-error: true
        run: |
          PACKAGE_EXISTS=false
          CURRENT_VERSION="${{ steps.mcp_info.outputs.version }}"
          
          # 检查包是否存在
          if npm view ${{ steps.mcp_info.outputs.package_name }} version &> /dev/null; then
            REMOTE_VERSION=$(npm view ${{ steps.mcp_info.outputs.package_name }} version)
            echo "远程版本: $REMOTE_VERSION, 当前版本: $CURRENT_VERSION"
            
            # 通过比较版本检查是否需要发布
            if [[ "$(printf '%s\n' "$REMOTE_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" == "$CURRENT_VERSION" && "$REMOTE_VERSION" != "$CURRENT_VERSION" ]]; then
              echo "远程版本较新，需要更新本地版本"
              PACKAGE_EXISTS=true
            elif [[ "$REMOTE_VERSION" == "$CURRENT_VERSION" ]]; then
              echo "版本相同，无需重新发布"
              PACKAGE_EXISTS=true
            else
              echo "本地版本较新，继续发布"
            fi
          else
            echo "包不存在，可以安全发布"
          fi
          
          echo "package_exists=${PACKAGE_EXISTS}" >> $GITHUB_OUTPUT
      
      - name: 递增版本（如果需要）
        if: ${{ steps.check_package.outputs.package_exists == 'true' }}
        run: |
          CURRENT_VERSION="${{ steps.mcp_info.outputs.version }}"
          
          # 拆分版本号并递增补丁版本
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          
          # 确保有三部分
          while [ ${#VERSION_PARTS[@]} -lt 3 ]; do
            VERSION_PARTS+=("0")
          done
          
          # 递增补丁版本
          VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))
          
          # 组合新版本
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo "递增版本: $CURRENT_VERSION -> $NEW_VERSION"
          
          # 更新package.json
          npm version $NEW_VERSION --no-git-tag-version --allow-same-version
      
      - name: 运行测试
        run: npm test
        continue-on-error: true
      
      - name: 发布到 NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 
